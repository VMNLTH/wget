#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esg-dn1.nsc.liu.se - 2023/04/13 21:08:19
# Search URL: https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.MNA-44.SMHI.ICHEC-EC-EARTH.rcp26.r12i1p1.RCA4.v1.3hr.tas.v20180109|esg-dn1.nsc.liu.se
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.MNA-44.SMHI.ICHEC-EC-EARTH.rcp26.r12i1p1.RCA4.v1.3hr.tas.v20180109|esg-dn1.nsc.liu.se'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200601010000-200612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200601010000-200612312100.nc' 'SHA256' '4ee3700ecbcfadc1960a126e21d47ead094978bee73af4447748e98e0e6369bb'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200701010000-200712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200701010000-200712312100.nc' 'SHA256' 'be6fdbb43048491604c5a47186903e28eae6cf8e1625705820ca123694c8b73d'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200801010000-200812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200801010000-200812312100.nc' 'SHA256' 'f1a84ced1df14ebe4d9cbcfb77cd5745b901758713fee217052f8ee3691fa345'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200901010000-200912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_200901010000-200912312100.nc' 'SHA256' '8c671f86a69af7a8da58fe63c1658d2bd15c7bc95afb44634130a8e67e174896'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201001010000-201012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201001010000-201012312100.nc' 'SHA256' '8e83a3415ab92d88773e804f5b8deef8e8d32efee33c69ed9c79ac0c09736374'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201101010000-201112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201101010000-201112312100.nc' 'SHA256' '5eb7861bf8c6bab0386429f2907001638d729f500094da23a0b0ff440ef152c3'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201201010000-201212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201201010000-201212312100.nc' 'SHA256' '2355b04bf3a3125334587712096a712e9a1adba7d98e2148920f23457a199c4c'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201301010000-201312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201301010000-201312312100.nc' 'SHA256' 'cc820707d256bd66ba6f7948c34d9450bd136b6df39ea9c8e3bd27e2e87cf6ed'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201401010000-201412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201401010000-201412312100.nc' 'SHA256' '99bd384415e26afc038f44401771c7372fc04d1a7acc5e709613532fb0ef416b'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201501010000-201512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201501010000-201512312100.nc' 'SHA256' 'b2adaf254b9532f9dff9f30310741022f3d178ae531ba6568efbbf6c4d9750a1'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201601010000-201612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201601010000-201612312100.nc' 'SHA256' '729487f78485aa14ef1cc19002621ed1b7b027cd9b119441115a82f114836171'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201701010000-201712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201701010000-201712312100.nc' 'SHA256' '0e03ce0d75a189fb3561acfec62c67aeb53bc09b84148956828aba731e4e8429'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201801010000-201812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201801010000-201812312100.nc' 'SHA256' 'eefad443e4cf2bfa38c26a2741b4b82eba76a4cfc5152d1a7daf3ddc5b3834f1'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201901010000-201912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_201901010000-201912312100.nc' 'SHA256' '7721272b093c405d67275ebda34a228410c6aa51d1d72af57fb6b45940065b6a'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202001010000-202012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202001010000-202012312100.nc' 'SHA256' 'bcbcfcabe80407c11a49ad97f7ce095ebdc9b1313e1c5b3a636d535d068ef470'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202101010000-202112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202101010000-202112312100.nc' 'SHA256' 'aca6894081a6293e175db0adf5b8002936187ce88e070cd8bc26d46f5d609164'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202201010000-202212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202201010000-202212312100.nc' 'SHA256' '555156ce0fe7625a11547a946a0a85804a0c254c5e332065dc649f55221933c1'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202301010000-202312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202301010000-202312312100.nc' 'SHA256' '180e9759815e7fc9d830c4725a7ffea3d788fd4bdf87318477f4a2a65186d688'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202401010000-202412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202401010000-202412312100.nc' 'SHA256' '4f8b723d96360305c50219f9b689c1ff6de756f1477483f1311153ff70f38cfd'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202501010000-202512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202501010000-202512312100.nc' 'SHA256' 'bfca993c5e4969e8ed66c5696def0a055a57da39991c0427739a8d5d5396aa68'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202601010000-202612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202601010000-202612312100.nc' 'SHA256' 'fdd91e057369011f8a187269e8f1dddffb4c2d5c54522fe26e6cfffd26b86b34'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202701010000-202712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202701010000-202712312100.nc' 'SHA256' '6d28e6bfc9670666c364486116e1c73da1d2e91176a6577ec2c39f85a4d51e11'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202801010000-202812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202801010000-202812312100.nc' 'SHA256' 'b4c60d902840f7acb065f5ae40e2474c01551b89d62e997f442f8c542a0648e8'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202901010000-202912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_202901010000-202912312100.nc' 'SHA256' '865a5fc1f8200767c6d73550d406e6d95a72c6831b2bd01d95faa7d4ea42c5de'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203001010000-203012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203001010000-203012312100.nc' 'SHA256' '02e54ef92f6c67f3213f0f2acb547e08916e1250087fb617b8f18c7cbf414f20'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203101010000-203112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203101010000-203112312100.nc' 'SHA256' 'dbe9e116096237ec6a27d64a09a0bae140b472ca577681d7ba2f62d9d42f4e86'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203201010000-203212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203201010000-203212312100.nc' 'SHA256' '6b0760a3fd8ea789fc4e4ab65cb8076c8dc9a2c0dc942af0458d706789b1fdb9'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203301010000-203312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203301010000-203312312100.nc' 'SHA256' '07d3e41e8c7d9d01c3074a3594ef49bc02ef21906e9506d478c10ac8dc7101ce'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203401010000-203412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203401010000-203412312100.nc' 'SHA256' 'c46ddacead96b56f3acff830ee357de239a615caa0d302dc6f74f394f167e9e6'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203501010000-203512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203501010000-203512312100.nc' 'SHA256' 'b583d0f263903e425a051adde5692484819e6600afb022e8afab6ed9ba664963'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203601010000-203612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203601010000-203612312100.nc' 'SHA256' '87422c52a58de45d1812da423ca0df4481717ff1c52ab369e751c4d3a45bbcd4'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203701010000-203712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203701010000-203712312100.nc' 'SHA256' 'abb1bd7f6b57766384e8470c3f51032be5a723dc50bb29c42e69f7086abec1ba'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203801010000-203812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203801010000-203812312100.nc' 'SHA256' '282787797d0b9f96eb26450b7cedd86889d722c04522403b8e2581a0ae1c7567'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203901010000-203912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_203901010000-203912312100.nc' 'SHA256' '38b1936e41ff438845376d5397f47696985a02a4172681954ffe0fb7f479cbbd'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204001010000-204012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204001010000-204012312100.nc' 'SHA256' '110fbae6ee949c4c7ba82ded2f9b5ae988eaf6a6fe4991e21e30dc533c43f976'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204101010000-204112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204101010000-204112312100.nc' 'SHA256' '9995d1cbc020e209c5d08e48a405d77402f2e97eae6c996003be5a6009ce2831'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204201010000-204212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204201010000-204212312100.nc' 'SHA256' 'e04e4af62b45845602e66f9438bd1bb76de806fc83f81ca372d6540304d4df21'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204301010000-204312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204301010000-204312312100.nc' 'SHA256' '8a67a64d974cce18650145e58c50c56402d38065804be81b8266d8eccdbd4812'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204401010000-204412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204401010000-204412312100.nc' 'SHA256' '02a70cfd8cbd41ff88aed915dc78836f292aca4d8407253e9cef9a242548dd04'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204501010000-204512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204501010000-204512312100.nc' 'SHA256' 'b151110a87ba17e8898ce8e1c062fa56e7d7d80a013a1f3787cd600c74bc6983'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204601010000-204612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204601010000-204612312100.nc' 'SHA256' 'b92e22d253022307d3359e636218b14d3a4b4b547e3ccc449e74bdf5354332fc'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204701010000-204712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204701010000-204712312100.nc' 'SHA256' 'de77e15b7088fa1cf1fa9b4f910db93f92d734749579d65a4298e1c4d3ad4020'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204801010000-204812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204801010000-204812312100.nc' 'SHA256' '07d04259d82b2069151cd12f0828169334c6eab2c44012084b0b3ff65140b891'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204901010000-204912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_204901010000-204912312100.nc' 'SHA256' 'ce2a71de5894d158556f32970b70713f61e785b782bee3a22bb8fc1cb3b5a6a3'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205001010000-205012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205001010000-205012312100.nc' 'SHA256' 'fbaf42e0b4a413e2bb6a991dd5e72ed3f59ce37870901cd59eaa25f9132429a6'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205101010000-205112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205101010000-205112312100.nc' 'SHA256' '53daf3a7ad2c023b8204fbf34d9f513a91e19527ab36657dd198d9ad6124db67'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205201010000-205212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205201010000-205212312100.nc' 'SHA256' '63d9eda584e01c3b33b3ed245f1bf7844a68e25aa7307ced9488186ce0b782ef'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205301010000-205312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205301010000-205312312100.nc' 'SHA256' 'ee4fe71938d739928b8fa7d02356fee880b65f2fa008a9ac1ea6b7bf1292c1bc'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205401010000-205412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205401010000-205412312100.nc' 'SHA256' '646cca275c2a744f58a5b636de25f209c1b0e516294083598d0137be7f3cc0f6'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205501010000-205512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205501010000-205512312100.nc' 'SHA256' 'bd55a32a09544792f4c37e103ff0eebcecff56c36fc2d5cabddfd97d99ffb0de'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205601010000-205612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205601010000-205612312100.nc' 'SHA256' '9da5a7072adb58d6560933f95b14e243e2b72efd59964f0d4b2059deb7f51d79'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205701010000-205712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205701010000-205712312100.nc' 'SHA256' '5287e330232db640b538d601185578b52d507c8a1967a8496d9e89cb83063aeb'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205801010000-205812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205801010000-205812312100.nc' 'SHA256' 'ee5dba7476fb8921194b490f66525558d156362ca9f07933c7e65b75a36f96b1'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205901010000-205912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_205901010000-205912312100.nc' 'SHA256' 'b3eb513d1606c297cdfd969385854d95797be4c229b5f65aa3005f6dfc9bce35'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206001010000-206012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206001010000-206012312100.nc' 'SHA256' '5496240685711f13f9564a26a6a800636911afff43ecbe53914e84361515e43f'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206101010000-206112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206101010000-206112312100.nc' 'SHA256' '5edb34216dcdaa7dd28e9b7eb3a47a702187cd4a87a2432fb95e10ac37809e96'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206201010000-206212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206201010000-206212312100.nc' 'SHA256' '7de487ea164afcb8b9b81414e8e9664587dbc2692753bd505e7b642cfdd26299'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206301010000-206312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206301010000-206312312100.nc' 'SHA256' '4d56192a37f095359b596b208b0e11b101cb28d5095fb0749954af004fd22ec5'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206401010000-206412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206401010000-206412312100.nc' 'SHA256' '4da1d3ff6aa59c8942028278f063f98ded2139546f080648e08033e8b512a4fd'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206501010000-206512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206501010000-206512312100.nc' 'SHA256' 'f0a8741c6b7e105a0d164b9bfa3ecf7e2eaab9720521463a82a963215879871d'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206601010000-206612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206601010000-206612312100.nc' 'SHA256' '4721953baf0cd672dcb7b7f0676a38dc37b787d771fb6660260c2f3efb4840ba'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206701010000-206712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206701010000-206712312100.nc' 'SHA256' '095b8a84e9b7ea8ae41316aa07e3f206b9142e00cec0fdc47b5fd446cf17e64b'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206801010000-206812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206801010000-206812312100.nc' 'SHA256' 'eb911019c290baf42a2fcd63d3fe095f8348cb63e4ac0ec0b2244c9dfbaeb003'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206901010000-206912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_206901010000-206912312100.nc' 'SHA256' '767c377f8f0c55d48bcd4f5b46d1f9adcf6f4ffa2cca4940c386de5152d0d961'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207001010000-207012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207001010000-207012312100.nc' 'SHA256' 'ad687cfd72e37a36418ca87dfb9cb4a5ba50f87ad1e117a780201de0b281d73c'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207101010000-207112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207101010000-207112312100.nc' 'SHA256' '64ab78e8a630150009b474991d57c75f454233715408d003b1a0ddc2e4d4c5a4'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207201010000-207212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207201010000-207212312100.nc' 'SHA256' 'e6d4ac1479af287c442cbfeb45f6c52926edd5be2fe1016da7a39450e65757c6'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207301010000-207312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207301010000-207312312100.nc' 'SHA256' '060e17911c718218df631881ad21a640f0278b12e815c422490e23ac00677e81'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207401010000-207412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207401010000-207412312100.nc' 'SHA256' 'c303fc17dc1648781a10339baed0c27da2fcc6a5fa48753d85c32ef093464611'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207501010000-207512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207501010000-207512312100.nc' 'SHA256' 'df59ff5765ff649285e60ae5b830216271682203adc850005badb9cb130f9dde'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207601010000-207612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207601010000-207612312100.nc' 'SHA256' '6cac693f3124d0eef79c5c29a8adc4d7eeb6aed2b635b2cd12ee4f1aea0cb02c'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207701010000-207712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207701010000-207712312100.nc' 'SHA256' '79c8d1ac2a0335d6ca34d4c39fb01ec17e9e3142b3f09fd45d188a9d966f7af6'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207801010000-207812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207801010000-207812312100.nc' 'SHA256' '9fc812fbc121b62e582412e6a65cc7421468b002bcb9eb077197915520576d31'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207901010000-207912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_207901010000-207912312100.nc' 'SHA256' '41597354dff28043115d8b2787ec468f7711d9cc2f4d561f89801f068fcd5331'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208001010000-208012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208001010000-208012312100.nc' 'SHA256' '6a1ad586e8341140475af5b5bf38648f08dda3173690bebaf58f4dd3f043a44d'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208101010000-208112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208101010000-208112312100.nc' 'SHA256' 'e3f362bf5676116494397a037cf19ac99c772ea67c94190eab18b646c88f2733'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208201010000-208212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208201010000-208212312100.nc' 'SHA256' 'b88abef0d403e227f25f4a489cd9363c7f62589264285c24da7cba70b2f77e89'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208301010000-208312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208301010000-208312312100.nc' 'SHA256' '3a7c83f1db9763d1e86cd129e65128abe3c9eef35122a8e3b0dd049624eb287e'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208401010000-208412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208401010000-208412312100.nc' 'SHA256' 'fa792cf675b53eb77428c990b7b74483c7efe9a16a5db2fcf1bc6f8761db9529'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208501010000-208512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208501010000-208512312100.nc' 'SHA256' 'e2bbdb076448eb440f635fe26767eedea5f2b846c2c511eded3339e38f811cb9'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208601010000-208612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208601010000-208612312100.nc' 'SHA256' '6442b9e8b3f9c35970bb7bc8540d4c75c6463e3600978f3e1977910525ae7829'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208701010000-208712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208701010000-208712312100.nc' 'SHA256' 'b8c22611eb22c7ac578f6f619509985f41f01369a66a34ece31d32c0f22e98bd'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208801010000-208812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208801010000-208812312100.nc' 'SHA256' '1b97ff18cb73cafadd3893c5ebfa5c9fb518b649b33e1c4d1014136edaf95a4b'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208901010000-208912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_208901010000-208912312100.nc' 'SHA256' '2c040d8819b1fa0c23a65de8a8b3cba8c69d1f9cdd487b85ed6446fcca43873a'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209001010000-209012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209001010000-209012312100.nc' 'SHA256' '84e4d1ed09f3d5c1607c9ff197f164a3c08d48254edb3e93a314e3395dd5fcb4'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209101010000-209112312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209101010000-209112312100.nc' 'SHA256' '8800d154d5a9795ff6f2a14283d9e640b0123ee4dd4bfb66666d618e7cf66016'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209201010000-209212312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209201010000-209212312100.nc' 'SHA256' 'e30c1973d5085af5a811ff4230315285f906210cc3df4be4ff80ba3203f25505'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209301010000-209312312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209301010000-209312312100.nc' 'SHA256' '9ffa7acb865e4df3992bb670a486806a18156ef0a039a32fdc1d029188639505'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209401010000-209412312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209401010000-209412312100.nc' 'SHA256' 'b8945e580d12b7645d30722ec0455f911434a0d337c6609108b70b258b1cc05d'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209501010000-209512312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209501010000-209512312100.nc' 'SHA256' 'b46e46e8ab758b0011cff526a366747c4fcdf62a17f4ef3639d7f70fbafe9c44'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209601010000-209612312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209601010000-209612312100.nc' 'SHA256' 'a0154c36be9c9fec18dd858303d37034f37c3bbb10411f2bd34533aaab7adedd'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209701010000-209712312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209701010000-209712312100.nc' 'SHA256' 'f900ffa381dcc9b67a784b75b147849f6c4690a88ef6fde7bd1a70ac713ee223'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209801010000-209812312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209801010000-209812312100.nc' 'SHA256' '23a62031942bc29c601f48a2cdb034eac1bb3f0f03a7ad1f2f50ee0aa4ff212d'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209901010000-209912312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_209901010000-209912312100.nc' 'SHA256' '70a99fe3a6eeac8abdf2a15f33a7da506020eb1b0eb8059517dde2571095715f'
'tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_210001010000-210012312100.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/MNA-44/SMHI/ICHEC-EC-EARTH/rcp26/r12i1p1/SMHI-RCA4/v1/3hr/tas/v20180109/tas_MNA-44_ICHEC-EC-EARTH_rcp26_r12i1p1_SMHI-RCA4_v1_3hr_210001010000-210012312100.nc' 'SHA256' '3f20566173cea8650fb41694777bb9c71d523fbb8da72c2a856b3d28e702d484'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
